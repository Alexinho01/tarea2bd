
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Correo
 * 
 */
export type Correo = $Result.DefaultSelection<Prisma.$CorreoPayload>
/**
 * Model Favorito
 * 
 */
export type Favorito = $Result.DefaultSelection<Prisma.$FavoritoPayload>
/**
 * Model Bloqueado
 * 
 */
export type Bloqueado = $Result.DefaultSelection<Prisma.$BloqueadoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.correo`: Exposes CRUD operations for the **Correo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Correos
    * const correos = await prisma.correo.findMany()
    * ```
    */
  get correo(): Prisma.CorreoDelegate<ExtArgs>;

  /**
   * `prisma.favorito`: Exposes CRUD operations for the **Favorito** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favoritos
    * const favoritos = await prisma.favorito.findMany()
    * ```
    */
  get favorito(): Prisma.FavoritoDelegate<ExtArgs>;

  /**
   * `prisma.bloqueado`: Exposes CRUD operations for the **Bloqueado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bloqueados
    * const bloqueados = await prisma.bloqueado.findMany()
    * ```
    */
  get bloqueado(): Prisma.BloqueadoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Correo: 'Correo',
    Favorito: 'Favorito',
    Bloqueado: 'Bloqueado'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'correo' | 'favorito' | 'bloqueado'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Correo: {
        payload: Prisma.$CorreoPayload<ExtArgs>
        fields: Prisma.CorreoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorreoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorreoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>
          }
          findFirst: {
            args: Prisma.CorreoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorreoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>
          }
          findMany: {
            args: Prisma.CorreoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>[]
          }
          create: {
            args: Prisma.CorreoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>
          }
          createMany: {
            args: Prisma.CorreoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorreoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>[]
          }
          delete: {
            args: Prisma.CorreoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>
          }
          update: {
            args: Prisma.CorreoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>
          }
          deleteMany: {
            args: Prisma.CorreoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CorreoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CorreoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CorreoPayload>
          }
          aggregate: {
            args: Prisma.CorreoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCorreo>
          }
          groupBy: {
            args: Prisma.CorreoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CorreoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorreoCountArgs<ExtArgs>,
            result: $Utils.Optional<CorreoCountAggregateOutputType> | number
          }
        }
      }
      Favorito: {
        payload: Prisma.$FavoritoPayload<ExtArgs>
        fields: Prisma.FavoritoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoritoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoritoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>
          }
          findFirst: {
            args: Prisma.FavoritoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoritoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>
          }
          findMany: {
            args: Prisma.FavoritoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>[]
          }
          create: {
            args: Prisma.FavoritoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>
          }
          createMany: {
            args: Prisma.FavoritoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoritoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>[]
          }
          delete: {
            args: Prisma.FavoritoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>
          }
          update: {
            args: Prisma.FavoritoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>
          }
          deleteMany: {
            args: Prisma.FavoritoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavoritoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavoritoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritoPayload>
          }
          aggregate: {
            args: Prisma.FavoritoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavorito>
          }
          groupBy: {
            args: Prisma.FavoritoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavoritoGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoritoCountArgs<ExtArgs>,
            result: $Utils.Optional<FavoritoCountAggregateOutputType> | number
          }
        }
      }
      Bloqueado: {
        payload: Prisma.$BloqueadoPayload<ExtArgs>
        fields: Prisma.BloqueadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BloqueadoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BloqueadoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>
          }
          findFirst: {
            args: Prisma.BloqueadoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BloqueadoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>
          }
          findMany: {
            args: Prisma.BloqueadoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>[]
          }
          create: {
            args: Prisma.BloqueadoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>
          }
          createMany: {
            args: Prisma.BloqueadoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BloqueadoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>[]
          }
          delete: {
            args: Prisma.BloqueadoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>
          }
          update: {
            args: Prisma.BloqueadoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>
          }
          deleteMany: {
            args: Prisma.BloqueadoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BloqueadoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BloqueadoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BloqueadoPayload>
          }
          aggregate: {
            args: Prisma.BloqueadoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBloqueado>
          }
          groupBy: {
            args: Prisma.BloqueadoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BloqueadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.BloqueadoCountArgs<ExtArgs>,
            result: $Utils.Optional<BloqueadoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    direcciones_favoritas: number
    direcciones_bloqueadas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    direcciones_favoritas?: boolean | UsuarioCountOutputTypeCountDirecciones_favoritasArgs
    direcciones_bloqueadas?: boolean | UsuarioCountOutputTypeCountDirecciones_bloqueadasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountDirecciones_favoritasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoritoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountDirecciones_bloqueadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BloqueadoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id_usuario: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id_usuario: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id_usuario: number | null
    direccion_correo: string | null
    password: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id_usuario: number | null
    direccion_correo: string | null
    password: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id_usuario: number
    direccion_correo: number
    password: number
    nombre: number
    descripcion: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id_usuario?: true
  }

  export type UsuarioSumAggregateInputType = {
    id_usuario?: true
  }

  export type UsuarioMinAggregateInputType = {
    id_usuario?: true
    direccion_correo?: true
    password?: true
    nombre?: true
    descripcion?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id_usuario?: true
    direccion_correo?: true
    password?: true
    nombre?: true
    descripcion?: true
  }

  export type UsuarioCountAggregateInputType = {
    id_usuario?: true
    direccion_correo?: true
    password?: true
    nombre?: true
    descripcion?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id_usuario: number
    direccion_correo: string
    password: string
    nombre: string
    descripcion: string | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_usuario?: boolean
    direccion_correo?: boolean
    password?: boolean
    nombre?: boolean
    descripcion?: boolean
    direcciones_favoritas?: boolean | Usuario$direcciones_favoritasArgs<ExtArgs>
    direcciones_bloqueadas?: boolean | Usuario$direcciones_bloqueadasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_usuario?: boolean
    direccion_correo?: boolean
    password?: boolean
    nombre?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id_usuario?: boolean
    direccion_correo?: boolean
    password?: boolean
    nombre?: boolean
    descripcion?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    direcciones_favoritas?: boolean | Usuario$direcciones_favoritasArgs<ExtArgs>
    direcciones_bloqueadas?: boolean | Usuario$direcciones_bloqueadasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      direcciones_favoritas: Prisma.$FavoritoPayload<ExtArgs>[]
      direcciones_bloqueadas: Prisma.$BloqueadoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_usuario: number
      direccion_correo: string
      password: string
      nombre: string
      descripcion: string | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id_usuario`
     * const usuarioWithId_usuarioOnly = await prisma.usuario.findMany({ select: { id_usuario: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id_usuario`
     * const usuarioWithId_usuarioOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id_usuario: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    direcciones_favoritas<T extends Usuario$direcciones_favoritasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$direcciones_favoritasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'findMany'> | Null>;

    direcciones_bloqueadas<T extends Usuario$direcciones_bloqueadasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$direcciones_bloqueadasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id_usuario: FieldRef<"Usuario", 'Int'>
    readonly direccion_correo: FieldRef<"Usuario", 'String'>
    readonly password: FieldRef<"Usuario", 'String'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly descripcion: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.direcciones_favoritas
   */
  export type Usuario$direcciones_favoritasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    where?: FavoritoWhereInput
    orderBy?: FavoritoOrderByWithRelationInput | FavoritoOrderByWithRelationInput[]
    cursor?: FavoritoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoritoScalarFieldEnum | FavoritoScalarFieldEnum[]
  }

  /**
   * Usuario.direcciones_bloqueadas
   */
  export type Usuario$direcciones_bloqueadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    where?: BloqueadoWhereInput
    orderBy?: BloqueadoOrderByWithRelationInput | BloqueadoOrderByWithRelationInput[]
    cursor?: BloqueadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BloqueadoScalarFieldEnum | BloqueadoScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Correo
   */

  export type AggregateCorreo = {
    _count: CorreoCountAggregateOutputType | null
    _avg: CorreoAvgAggregateOutputType | null
    _sum: CorreoSumAggregateOutputType | null
    _min: CorreoMinAggregateOutputType | null
    _max: CorreoMaxAggregateOutputType | null
  }

  export type CorreoAvgAggregateOutputType = {
    id_correo: number | null
    id_remitente: number | null
    id_destinatario: number | null
  }

  export type CorreoSumAggregateOutputType = {
    id_correo: number | null
    id_remitente: number | null
    id_destinatario: number | null
  }

  export type CorreoMinAggregateOutputType = {
    id_correo: number | null
    id_remitente: number | null
    id_destinatario: number | null
  }

  export type CorreoMaxAggregateOutputType = {
    id_correo: number | null
    id_remitente: number | null
    id_destinatario: number | null
  }

  export type CorreoCountAggregateOutputType = {
    id_correo: number
    id_remitente: number
    id_destinatario: number
    _all: number
  }


  export type CorreoAvgAggregateInputType = {
    id_correo?: true
    id_remitente?: true
    id_destinatario?: true
  }

  export type CorreoSumAggregateInputType = {
    id_correo?: true
    id_remitente?: true
    id_destinatario?: true
  }

  export type CorreoMinAggregateInputType = {
    id_correo?: true
    id_remitente?: true
    id_destinatario?: true
  }

  export type CorreoMaxAggregateInputType = {
    id_correo?: true
    id_remitente?: true
    id_destinatario?: true
  }

  export type CorreoCountAggregateInputType = {
    id_correo?: true
    id_remitente?: true
    id_destinatario?: true
    _all?: true
  }

  export type CorreoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Correo to aggregate.
     */
    where?: CorreoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Correos to fetch.
     */
    orderBy?: CorreoOrderByWithRelationInput | CorreoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorreoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Correos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Correos
    **/
    _count?: true | CorreoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorreoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorreoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorreoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorreoMaxAggregateInputType
  }

  export type GetCorreoAggregateType<T extends CorreoAggregateArgs> = {
        [P in keyof T & keyof AggregateCorreo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorreo[P]>
      : GetScalarType<T[P], AggregateCorreo[P]>
  }




  export type CorreoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorreoWhereInput
    orderBy?: CorreoOrderByWithAggregationInput | CorreoOrderByWithAggregationInput[]
    by: CorreoScalarFieldEnum[] | CorreoScalarFieldEnum
    having?: CorreoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorreoCountAggregateInputType | true
    _avg?: CorreoAvgAggregateInputType
    _sum?: CorreoSumAggregateInputType
    _min?: CorreoMinAggregateInputType
    _max?: CorreoMaxAggregateInputType
  }

  export type CorreoGroupByOutputType = {
    id_correo: number
    id_remitente: number
    id_destinatario: number
    _count: CorreoCountAggregateOutputType | null
    _avg: CorreoAvgAggregateOutputType | null
    _sum: CorreoSumAggregateOutputType | null
    _min: CorreoMinAggregateOutputType | null
    _max: CorreoMaxAggregateOutputType | null
  }

  type GetCorreoGroupByPayload<T extends CorreoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorreoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorreoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorreoGroupByOutputType[P]>
            : GetScalarType<T[P], CorreoGroupByOutputType[P]>
        }
      >
    >


  export type CorreoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_correo?: boolean
    id_remitente?: boolean
    id_destinatario?: boolean
  }, ExtArgs["result"]["correo"]>

  export type CorreoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_correo?: boolean
    id_remitente?: boolean
    id_destinatario?: boolean
  }, ExtArgs["result"]["correo"]>

  export type CorreoSelectScalar = {
    id_correo?: boolean
    id_remitente?: boolean
    id_destinatario?: boolean
  }


  export type $CorreoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Correo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_correo: number
      id_remitente: number
      id_destinatario: number
    }, ExtArgs["result"]["correo"]>
    composites: {}
  }

  type CorreoGetPayload<S extends boolean | null | undefined | CorreoDefaultArgs> = $Result.GetResult<Prisma.$CorreoPayload, S>

  type CorreoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CorreoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CorreoCountAggregateInputType | true
    }

  export interface CorreoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Correo'], meta: { name: 'Correo' } }
    /**
     * Find zero or one Correo that matches the filter.
     * @param {CorreoFindUniqueArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CorreoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CorreoFindUniqueArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Correo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CorreoFindUniqueOrThrowArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CorreoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CorreoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Correo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoFindFirstArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CorreoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CorreoFindFirstArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Correo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoFindFirstOrThrowArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CorreoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CorreoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Correos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Correos
     * const correos = await prisma.correo.findMany()
     * 
     * // Get first 10 Correos
     * const correos = await prisma.correo.findMany({ take: 10 })
     * 
     * // Only select the `id_correo`
     * const correoWithId_correoOnly = await prisma.correo.findMany({ select: { id_correo: true } })
     * 
    **/
    findMany<T extends CorreoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CorreoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Correo.
     * @param {CorreoCreateArgs} args - Arguments to create a Correo.
     * @example
     * // Create one Correo
     * const Correo = await prisma.correo.create({
     *   data: {
     *     // ... data to create a Correo
     *   }
     * })
     * 
    **/
    create<T extends CorreoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CorreoCreateArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Correos.
     * @param {CorreoCreateManyArgs} args - Arguments to create many Correos.
     * @example
     * // Create many Correos
     * const correo = await prisma.correo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CorreoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CorreoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Correos and returns the data saved in the database.
     * @param {CorreoCreateManyAndReturnArgs} args - Arguments to create many Correos.
     * @example
     * // Create many Correos
     * const correo = await prisma.correo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Correos and only return the `id_correo`
     * const correoWithId_correoOnly = await prisma.correo.createManyAndReturn({ 
     *   select: { id_correo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CorreoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CorreoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Correo.
     * @param {CorreoDeleteArgs} args - Arguments to delete one Correo.
     * @example
     * // Delete one Correo
     * const Correo = await prisma.correo.delete({
     *   where: {
     *     // ... filter to delete one Correo
     *   }
     * })
     * 
    **/
    delete<T extends CorreoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CorreoDeleteArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Correo.
     * @param {CorreoUpdateArgs} args - Arguments to update one Correo.
     * @example
     * // Update one Correo
     * const correo = await prisma.correo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CorreoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CorreoUpdateArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Correos.
     * @param {CorreoDeleteManyArgs} args - Arguments to filter Correos to delete.
     * @example
     * // Delete a few Correos
     * const { count } = await prisma.correo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CorreoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CorreoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Correos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Correos
     * const correo = await prisma.correo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CorreoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CorreoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Correo.
     * @param {CorreoUpsertArgs} args - Arguments to update or create a Correo.
     * @example
     * // Update or create a Correo
     * const correo = await prisma.correo.upsert({
     *   create: {
     *     // ... data to create a Correo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Correo we want to update
     *   }
     * })
    **/
    upsert<T extends CorreoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CorreoUpsertArgs<ExtArgs>>
    ): Prisma__CorreoClient<$Result.GetResult<Prisma.$CorreoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Correos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoCountArgs} args - Arguments to filter Correos to count.
     * @example
     * // Count the number of Correos
     * const count = await prisma.correo.count({
     *   where: {
     *     // ... the filter for the Correos we want to count
     *   }
     * })
    **/
    count<T extends CorreoCountArgs>(
      args?: Subset<T, CorreoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorreoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Correo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorreoAggregateArgs>(args: Subset<T, CorreoAggregateArgs>): Prisma.PrismaPromise<GetCorreoAggregateType<T>>

    /**
     * Group by Correo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorreoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorreoGroupByArgs['orderBy'] }
        : { orderBy?: CorreoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorreoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorreoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Correo model
   */
  readonly fields: CorreoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Correo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorreoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Correo model
   */ 
  interface CorreoFieldRefs {
    readonly id_correo: FieldRef<"Correo", 'Int'>
    readonly id_remitente: FieldRef<"Correo", 'Int'>
    readonly id_destinatario: FieldRef<"Correo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Correo findUnique
   */
  export type CorreoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * Filter, which Correo to fetch.
     */
    where: CorreoWhereUniqueInput
  }

  /**
   * Correo findUniqueOrThrow
   */
  export type CorreoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * Filter, which Correo to fetch.
     */
    where: CorreoWhereUniqueInput
  }

  /**
   * Correo findFirst
   */
  export type CorreoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * Filter, which Correo to fetch.
     */
    where?: CorreoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Correos to fetch.
     */
    orderBy?: CorreoOrderByWithRelationInput | CorreoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Correos.
     */
    cursor?: CorreoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Correos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Correos.
     */
    distinct?: CorreoScalarFieldEnum | CorreoScalarFieldEnum[]
  }

  /**
   * Correo findFirstOrThrow
   */
  export type CorreoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * Filter, which Correo to fetch.
     */
    where?: CorreoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Correos to fetch.
     */
    orderBy?: CorreoOrderByWithRelationInput | CorreoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Correos.
     */
    cursor?: CorreoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Correos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Correos.
     */
    distinct?: CorreoScalarFieldEnum | CorreoScalarFieldEnum[]
  }

  /**
   * Correo findMany
   */
  export type CorreoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * Filter, which Correos to fetch.
     */
    where?: CorreoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Correos to fetch.
     */
    orderBy?: CorreoOrderByWithRelationInput | CorreoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Correos.
     */
    cursor?: CorreoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Correos.
     */
    skip?: number
    distinct?: CorreoScalarFieldEnum | CorreoScalarFieldEnum[]
  }

  /**
   * Correo create
   */
  export type CorreoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * The data needed to create a Correo.
     */
    data: XOR<CorreoCreateInput, CorreoUncheckedCreateInput>
  }

  /**
   * Correo createMany
   */
  export type CorreoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Correos.
     */
    data: CorreoCreateManyInput | CorreoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Correo createManyAndReturn
   */
  export type CorreoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Correos.
     */
    data: CorreoCreateManyInput | CorreoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Correo update
   */
  export type CorreoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * The data needed to update a Correo.
     */
    data: XOR<CorreoUpdateInput, CorreoUncheckedUpdateInput>
    /**
     * Choose, which Correo to update.
     */
    where: CorreoWhereUniqueInput
  }

  /**
   * Correo updateMany
   */
  export type CorreoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Correos.
     */
    data: XOR<CorreoUpdateManyMutationInput, CorreoUncheckedUpdateManyInput>
    /**
     * Filter which Correos to update
     */
    where?: CorreoWhereInput
  }

  /**
   * Correo upsert
   */
  export type CorreoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * The filter to search for the Correo to update in case it exists.
     */
    where: CorreoWhereUniqueInput
    /**
     * In case the Correo found by the `where` argument doesn't exist, create a new Correo with this data.
     */
    create: XOR<CorreoCreateInput, CorreoUncheckedCreateInput>
    /**
     * In case the Correo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorreoUpdateInput, CorreoUncheckedUpdateInput>
  }

  /**
   * Correo delete
   */
  export type CorreoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
    /**
     * Filter which Correo to delete.
     */
    where: CorreoWhereUniqueInput
  }

  /**
   * Correo deleteMany
   */
  export type CorreoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Correos to delete
     */
    where?: CorreoWhereInput
  }

  /**
   * Correo without action
   */
  export type CorreoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Correo
     */
    select?: CorreoSelect<ExtArgs> | null
  }


  /**
   * Model Favorito
   */

  export type AggregateFavorito = {
    _count: FavoritoCountAggregateOutputType | null
    _avg: FavoritoAvgAggregateOutputType | null
    _sum: FavoritoSumAggregateOutputType | null
    _min: FavoritoMinAggregateOutputType | null
    _max: FavoritoMaxAggregateOutputType | null
  }

  export type FavoritoAvgAggregateOutputType = {
    id_favorito: number | null
    id_usuario_favorito: number | null
    id_usuario: number | null
  }

  export type FavoritoSumAggregateOutputType = {
    id_favorito: number | null
    id_usuario_favorito: number | null
    id_usuario: number | null
  }

  export type FavoritoMinAggregateOutputType = {
    id_favorito: number | null
    id_usuario_favorito: number | null
    id_usuario: number | null
  }

  export type FavoritoMaxAggregateOutputType = {
    id_favorito: number | null
    id_usuario_favorito: number | null
    id_usuario: number | null
  }

  export type FavoritoCountAggregateOutputType = {
    id_favorito: number
    id_usuario_favorito: number
    id_usuario: number
    _all: number
  }


  export type FavoritoAvgAggregateInputType = {
    id_favorito?: true
    id_usuario_favorito?: true
    id_usuario?: true
  }

  export type FavoritoSumAggregateInputType = {
    id_favorito?: true
    id_usuario_favorito?: true
    id_usuario?: true
  }

  export type FavoritoMinAggregateInputType = {
    id_favorito?: true
    id_usuario_favorito?: true
    id_usuario?: true
  }

  export type FavoritoMaxAggregateInputType = {
    id_favorito?: true
    id_usuario_favorito?: true
    id_usuario?: true
  }

  export type FavoritoCountAggregateInputType = {
    id_favorito?: true
    id_usuario_favorito?: true
    id_usuario?: true
    _all?: true
  }

  export type FavoritoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorito to aggregate.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: FavoritoOrderByWithRelationInput | FavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favoritos
    **/
    _count?: true | FavoritoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoritoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoritoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoritoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoritoMaxAggregateInputType
  }

  export type GetFavoritoAggregateType<T extends FavoritoAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorito]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorito[P]>
      : GetScalarType<T[P], AggregateFavorito[P]>
  }




  export type FavoritoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoritoWhereInput
    orderBy?: FavoritoOrderByWithAggregationInput | FavoritoOrderByWithAggregationInput[]
    by: FavoritoScalarFieldEnum[] | FavoritoScalarFieldEnum
    having?: FavoritoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoritoCountAggregateInputType | true
    _avg?: FavoritoAvgAggregateInputType
    _sum?: FavoritoSumAggregateInputType
    _min?: FavoritoMinAggregateInputType
    _max?: FavoritoMaxAggregateInputType
  }

  export type FavoritoGroupByOutputType = {
    id_favorito: number
    id_usuario_favorito: number
    id_usuario: number
    _count: FavoritoCountAggregateOutputType | null
    _avg: FavoritoAvgAggregateOutputType | null
    _sum: FavoritoSumAggregateOutputType | null
    _min: FavoritoMinAggregateOutputType | null
    _max: FavoritoMaxAggregateOutputType | null
  }

  type GetFavoritoGroupByPayload<T extends FavoritoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoritoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoritoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoritoGroupByOutputType[P]>
            : GetScalarType<T[P], FavoritoGroupByOutputType[P]>
        }
      >
    >


  export type FavoritoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_favorito?: boolean
    id_usuario_favorito?: boolean
    id_usuario?: boolean
    usuario_favorito?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorito"]>

  export type FavoritoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_favorito?: boolean
    id_usuario_favorito?: boolean
    id_usuario?: boolean
    usuario_favorito?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorito"]>

  export type FavoritoSelectScalar = {
    id_favorito?: boolean
    id_usuario_favorito?: boolean
    id_usuario?: boolean
  }

  export type FavoritoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario_favorito?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type FavoritoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario_favorito?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $FavoritoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Favorito"
    objects: {
      usuario_favorito: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_favorito: number
      id_usuario_favorito: number
      id_usuario: number
    }, ExtArgs["result"]["favorito"]>
    composites: {}
  }

  type FavoritoGetPayload<S extends boolean | null | undefined | FavoritoDefaultArgs> = $Result.GetResult<Prisma.$FavoritoPayload, S>

  type FavoritoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoritoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoritoCountAggregateInputType | true
    }

  export interface FavoritoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorito'], meta: { name: 'Favorito' } }
    /**
     * Find zero or one Favorito that matches the filter.
     * @param {FavoritoFindUniqueArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavoritoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritoFindUniqueArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Favorito that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoritoFindUniqueOrThrowArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavoritoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Favorito that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoFindFirstArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavoritoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritoFindFirstArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Favorito that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoFindFirstOrThrowArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavoritoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Favoritos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favoritos
     * const favoritos = await prisma.favorito.findMany()
     * 
     * // Get first 10 Favoritos
     * const favoritos = await prisma.favorito.findMany({ take: 10 })
     * 
     * // Only select the `id_favorito`
     * const favoritoWithId_favoritoOnly = await prisma.favorito.findMany({ select: { id_favorito: true } })
     * 
    **/
    findMany<T extends FavoritoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Favorito.
     * @param {FavoritoCreateArgs} args - Arguments to create a Favorito.
     * @example
     * // Create one Favorito
     * const Favorito = await prisma.favorito.create({
     *   data: {
     *     // ... data to create a Favorito
     *   }
     * })
     * 
    **/
    create<T extends FavoritoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritoCreateArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Favoritos.
     * @param {FavoritoCreateManyArgs} args - Arguments to create many Favoritos.
     * @example
     * // Create many Favoritos
     * const favorito = await prisma.favorito.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends FavoritoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favoritos and returns the data saved in the database.
     * @param {FavoritoCreateManyAndReturnArgs} args - Arguments to create many Favoritos.
     * @example
     * // Create many Favoritos
     * const favorito = await prisma.favorito.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favoritos and only return the `id_favorito`
     * const favoritoWithId_favoritoOnly = await prisma.favorito.createManyAndReturn({ 
     *   select: { id_favorito: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends FavoritoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Favorito.
     * @param {FavoritoDeleteArgs} args - Arguments to delete one Favorito.
     * @example
     * // Delete one Favorito
     * const Favorito = await prisma.favorito.delete({
     *   where: {
     *     // ... filter to delete one Favorito
     *   }
     * })
     * 
    **/
    delete<T extends FavoritoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritoDeleteArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Favorito.
     * @param {FavoritoUpdateArgs} args - Arguments to update one Favorito.
     * @example
     * // Update one Favorito
     * const favorito = await prisma.favorito.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavoritoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritoUpdateArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Favoritos.
     * @param {FavoritoDeleteManyArgs} args - Arguments to filter Favoritos to delete.
     * @example
     * // Delete a few Favoritos
     * const { count } = await prisma.favorito.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavoritoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favoritos
     * const favorito = await prisma.favorito.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavoritoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorito.
     * @param {FavoritoUpsertArgs} args - Arguments to update or create a Favorito.
     * @example
     * // Update or create a Favorito
     * const favorito = await prisma.favorito.upsert({
     *   create: {
     *     // ... data to create a Favorito
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorito we want to update
     *   }
     * })
    **/
    upsert<T extends FavoritoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritoUpsertArgs<ExtArgs>>
    ): Prisma__FavoritoClient<$Result.GetResult<Prisma.$FavoritoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Favoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoCountArgs} args - Arguments to filter Favoritos to count.
     * @example
     * // Count the number of Favoritos
     * const count = await prisma.favorito.count({
     *   where: {
     *     // ... the filter for the Favoritos we want to count
     *   }
     * })
    **/
    count<T extends FavoritoCountArgs>(
      args?: Subset<T, FavoritoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoritoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoritoAggregateArgs>(args: Subset<T, FavoritoAggregateArgs>): Prisma.PrismaPromise<GetFavoritoAggregateType<T>>

    /**
     * Group by Favorito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoritoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoritoGroupByArgs['orderBy'] }
        : { orderBy?: FavoritoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoritoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoritoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorito model
   */
  readonly fields: FavoritoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorito.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoritoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario_favorito<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Favorito model
   */ 
  interface FavoritoFieldRefs {
    readonly id_favorito: FieldRef<"Favorito", 'Int'>
    readonly id_usuario_favorito: FieldRef<"Favorito", 'Int'>
    readonly id_usuario: FieldRef<"Favorito", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Favorito findUnique
   */
  export type FavoritoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * Filter, which Favorito to fetch.
     */
    where: FavoritoWhereUniqueInput
  }

  /**
   * Favorito findUniqueOrThrow
   */
  export type FavoritoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * Filter, which Favorito to fetch.
     */
    where: FavoritoWhereUniqueInput
  }

  /**
   * Favorito findFirst
   */
  export type FavoritoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * Filter, which Favorito to fetch.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: FavoritoOrderByWithRelationInput | FavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favoritos.
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favoritos.
     */
    distinct?: FavoritoScalarFieldEnum | FavoritoScalarFieldEnum[]
  }

  /**
   * Favorito findFirstOrThrow
   */
  export type FavoritoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * Filter, which Favorito to fetch.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: FavoritoOrderByWithRelationInput | FavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favoritos.
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favoritos.
     */
    distinct?: FavoritoScalarFieldEnum | FavoritoScalarFieldEnum[]
  }

  /**
   * Favorito findMany
   */
  export type FavoritoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * Filter, which Favoritos to fetch.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: FavoritoOrderByWithRelationInput | FavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favoritos.
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    distinct?: FavoritoScalarFieldEnum | FavoritoScalarFieldEnum[]
  }

  /**
   * Favorito create
   */
  export type FavoritoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorito.
     */
    data: XOR<FavoritoCreateInput, FavoritoUncheckedCreateInput>
  }

  /**
   * Favorito createMany
   */
  export type FavoritoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favoritos.
     */
    data: FavoritoCreateManyInput | FavoritoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Favorito createManyAndReturn
   */
  export type FavoritoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Favoritos.
     */
    data: FavoritoCreateManyInput | FavoritoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorito update
   */
  export type FavoritoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorito.
     */
    data: XOR<FavoritoUpdateInput, FavoritoUncheckedUpdateInput>
    /**
     * Choose, which Favorito to update.
     */
    where: FavoritoWhereUniqueInput
  }

  /**
   * Favorito updateMany
   */
  export type FavoritoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favoritos.
     */
    data: XOR<FavoritoUpdateManyMutationInput, FavoritoUncheckedUpdateManyInput>
    /**
     * Filter which Favoritos to update
     */
    where?: FavoritoWhereInput
  }

  /**
   * Favorito upsert
   */
  export type FavoritoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorito to update in case it exists.
     */
    where: FavoritoWhereUniqueInput
    /**
     * In case the Favorito found by the `where` argument doesn't exist, create a new Favorito with this data.
     */
    create: XOR<FavoritoCreateInput, FavoritoUncheckedCreateInput>
    /**
     * In case the Favorito was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoritoUpdateInput, FavoritoUncheckedUpdateInput>
  }

  /**
   * Favorito delete
   */
  export type FavoritoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
    /**
     * Filter which Favorito to delete.
     */
    where: FavoritoWhereUniqueInput
  }

  /**
   * Favorito deleteMany
   */
  export type FavoritoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favoritos to delete
     */
    where?: FavoritoWhereInput
  }

  /**
   * Favorito without action
   */
  export type FavoritoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoritoInclude<ExtArgs> | null
  }


  /**
   * Model Bloqueado
   */

  export type AggregateBloqueado = {
    _count: BloqueadoCountAggregateOutputType | null
    _avg: BloqueadoAvgAggregateOutputType | null
    _sum: BloqueadoSumAggregateOutputType | null
    _min: BloqueadoMinAggregateOutputType | null
    _max: BloqueadoMaxAggregateOutputType | null
  }

  export type BloqueadoAvgAggregateOutputType = {
    id_bloqueado: number | null
    id_usuario_bloqueado: number | null
    id_usuario: number | null
  }

  export type BloqueadoSumAggregateOutputType = {
    id_bloqueado: number | null
    id_usuario_bloqueado: number | null
    id_usuario: number | null
  }

  export type BloqueadoMinAggregateOutputType = {
    id_bloqueado: number | null
    id_usuario_bloqueado: number | null
    id_usuario: number | null
  }

  export type BloqueadoMaxAggregateOutputType = {
    id_bloqueado: number | null
    id_usuario_bloqueado: number | null
    id_usuario: number | null
  }

  export type BloqueadoCountAggregateOutputType = {
    id_bloqueado: number
    id_usuario_bloqueado: number
    id_usuario: number
    _all: number
  }


  export type BloqueadoAvgAggregateInputType = {
    id_bloqueado?: true
    id_usuario_bloqueado?: true
    id_usuario?: true
  }

  export type BloqueadoSumAggregateInputType = {
    id_bloqueado?: true
    id_usuario_bloqueado?: true
    id_usuario?: true
  }

  export type BloqueadoMinAggregateInputType = {
    id_bloqueado?: true
    id_usuario_bloqueado?: true
    id_usuario?: true
  }

  export type BloqueadoMaxAggregateInputType = {
    id_bloqueado?: true
    id_usuario_bloqueado?: true
    id_usuario?: true
  }

  export type BloqueadoCountAggregateInputType = {
    id_bloqueado?: true
    id_usuario_bloqueado?: true
    id_usuario?: true
    _all?: true
  }

  export type BloqueadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bloqueado to aggregate.
     */
    where?: BloqueadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bloqueados to fetch.
     */
    orderBy?: BloqueadoOrderByWithRelationInput | BloqueadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BloqueadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bloqueados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bloqueados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bloqueados
    **/
    _count?: true | BloqueadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BloqueadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BloqueadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BloqueadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BloqueadoMaxAggregateInputType
  }

  export type GetBloqueadoAggregateType<T extends BloqueadoAggregateArgs> = {
        [P in keyof T & keyof AggregateBloqueado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBloqueado[P]>
      : GetScalarType<T[P], AggregateBloqueado[P]>
  }




  export type BloqueadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BloqueadoWhereInput
    orderBy?: BloqueadoOrderByWithAggregationInput | BloqueadoOrderByWithAggregationInput[]
    by: BloqueadoScalarFieldEnum[] | BloqueadoScalarFieldEnum
    having?: BloqueadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BloqueadoCountAggregateInputType | true
    _avg?: BloqueadoAvgAggregateInputType
    _sum?: BloqueadoSumAggregateInputType
    _min?: BloqueadoMinAggregateInputType
    _max?: BloqueadoMaxAggregateInputType
  }

  export type BloqueadoGroupByOutputType = {
    id_bloqueado: number
    id_usuario_bloqueado: number
    id_usuario: number
    _count: BloqueadoCountAggregateOutputType | null
    _avg: BloqueadoAvgAggregateOutputType | null
    _sum: BloqueadoSumAggregateOutputType | null
    _min: BloqueadoMinAggregateOutputType | null
    _max: BloqueadoMaxAggregateOutputType | null
  }

  type GetBloqueadoGroupByPayload<T extends BloqueadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BloqueadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BloqueadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BloqueadoGroupByOutputType[P]>
            : GetScalarType<T[P], BloqueadoGroupByOutputType[P]>
        }
      >
    >


  export type BloqueadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_bloqueado?: boolean
    id_usuario_bloqueado?: boolean
    id_usuario?: boolean
    usuario_bloqueado?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bloqueado"]>

  export type BloqueadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_bloqueado?: boolean
    id_usuario_bloqueado?: boolean
    id_usuario?: boolean
    usuario_bloqueado?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bloqueado"]>

  export type BloqueadoSelectScalar = {
    id_bloqueado?: boolean
    id_usuario_bloqueado?: boolean
    id_usuario?: boolean
  }

  export type BloqueadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario_bloqueado?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type BloqueadoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario_bloqueado?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $BloqueadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bloqueado"
    objects: {
      usuario_bloqueado: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_bloqueado: number
      id_usuario_bloqueado: number
      id_usuario: number
    }, ExtArgs["result"]["bloqueado"]>
    composites: {}
  }

  type BloqueadoGetPayload<S extends boolean | null | undefined | BloqueadoDefaultArgs> = $Result.GetResult<Prisma.$BloqueadoPayload, S>

  type BloqueadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BloqueadoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BloqueadoCountAggregateInputType | true
    }

  export interface BloqueadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bloqueado'], meta: { name: 'Bloqueado' } }
    /**
     * Find zero or one Bloqueado that matches the filter.
     * @param {BloqueadoFindUniqueArgs} args - Arguments to find a Bloqueado
     * @example
     * // Get one Bloqueado
     * const bloqueado = await prisma.bloqueado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BloqueadoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BloqueadoFindUniqueArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bloqueado that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BloqueadoFindUniqueOrThrowArgs} args - Arguments to find a Bloqueado
     * @example
     * // Get one Bloqueado
     * const bloqueado = await prisma.bloqueado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BloqueadoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BloqueadoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bloqueado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloqueadoFindFirstArgs} args - Arguments to find a Bloqueado
     * @example
     * // Get one Bloqueado
     * const bloqueado = await prisma.bloqueado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BloqueadoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BloqueadoFindFirstArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bloqueado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloqueadoFindFirstOrThrowArgs} args - Arguments to find a Bloqueado
     * @example
     * // Get one Bloqueado
     * const bloqueado = await prisma.bloqueado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BloqueadoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BloqueadoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bloqueados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloqueadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bloqueados
     * const bloqueados = await prisma.bloqueado.findMany()
     * 
     * // Get first 10 Bloqueados
     * const bloqueados = await prisma.bloqueado.findMany({ take: 10 })
     * 
     * // Only select the `id_bloqueado`
     * const bloqueadoWithId_bloqueadoOnly = await prisma.bloqueado.findMany({ select: { id_bloqueado: true } })
     * 
    **/
    findMany<T extends BloqueadoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BloqueadoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bloqueado.
     * @param {BloqueadoCreateArgs} args - Arguments to create a Bloqueado.
     * @example
     * // Create one Bloqueado
     * const Bloqueado = await prisma.bloqueado.create({
     *   data: {
     *     // ... data to create a Bloqueado
     *   }
     * })
     * 
    **/
    create<T extends BloqueadoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BloqueadoCreateArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bloqueados.
     * @param {BloqueadoCreateManyArgs} args - Arguments to create many Bloqueados.
     * @example
     * // Create many Bloqueados
     * const bloqueado = await prisma.bloqueado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BloqueadoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BloqueadoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bloqueados and returns the data saved in the database.
     * @param {BloqueadoCreateManyAndReturnArgs} args - Arguments to create many Bloqueados.
     * @example
     * // Create many Bloqueados
     * const bloqueado = await prisma.bloqueado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bloqueados and only return the `id_bloqueado`
     * const bloqueadoWithId_bloqueadoOnly = await prisma.bloqueado.createManyAndReturn({ 
     *   select: { id_bloqueado: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends BloqueadoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, BloqueadoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Bloqueado.
     * @param {BloqueadoDeleteArgs} args - Arguments to delete one Bloqueado.
     * @example
     * // Delete one Bloqueado
     * const Bloqueado = await prisma.bloqueado.delete({
     *   where: {
     *     // ... filter to delete one Bloqueado
     *   }
     * })
     * 
    **/
    delete<T extends BloqueadoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BloqueadoDeleteArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bloqueado.
     * @param {BloqueadoUpdateArgs} args - Arguments to update one Bloqueado.
     * @example
     * // Update one Bloqueado
     * const bloqueado = await prisma.bloqueado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BloqueadoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BloqueadoUpdateArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bloqueados.
     * @param {BloqueadoDeleteManyArgs} args - Arguments to filter Bloqueados to delete.
     * @example
     * // Delete a few Bloqueados
     * const { count } = await prisma.bloqueado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BloqueadoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BloqueadoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bloqueados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloqueadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bloqueados
     * const bloqueado = await prisma.bloqueado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BloqueadoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BloqueadoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bloqueado.
     * @param {BloqueadoUpsertArgs} args - Arguments to update or create a Bloqueado.
     * @example
     * // Update or create a Bloqueado
     * const bloqueado = await prisma.bloqueado.upsert({
     *   create: {
     *     // ... data to create a Bloqueado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bloqueado we want to update
     *   }
     * })
    **/
    upsert<T extends BloqueadoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BloqueadoUpsertArgs<ExtArgs>>
    ): Prisma__BloqueadoClient<$Result.GetResult<Prisma.$BloqueadoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bloqueados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloqueadoCountArgs} args - Arguments to filter Bloqueados to count.
     * @example
     * // Count the number of Bloqueados
     * const count = await prisma.bloqueado.count({
     *   where: {
     *     // ... the filter for the Bloqueados we want to count
     *   }
     * })
    **/
    count<T extends BloqueadoCountArgs>(
      args?: Subset<T, BloqueadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BloqueadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bloqueado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloqueadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BloqueadoAggregateArgs>(args: Subset<T, BloqueadoAggregateArgs>): Prisma.PrismaPromise<GetBloqueadoAggregateType<T>>

    /**
     * Group by Bloqueado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloqueadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BloqueadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BloqueadoGroupByArgs['orderBy'] }
        : { orderBy?: BloqueadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BloqueadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBloqueadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bloqueado model
   */
  readonly fields: BloqueadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bloqueado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BloqueadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario_bloqueado<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bloqueado model
   */ 
  interface BloqueadoFieldRefs {
    readonly id_bloqueado: FieldRef<"Bloqueado", 'Int'>
    readonly id_usuario_bloqueado: FieldRef<"Bloqueado", 'Int'>
    readonly id_usuario: FieldRef<"Bloqueado", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Bloqueado findUnique
   */
  export type BloqueadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * Filter, which Bloqueado to fetch.
     */
    where: BloqueadoWhereUniqueInput
  }

  /**
   * Bloqueado findUniqueOrThrow
   */
  export type BloqueadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * Filter, which Bloqueado to fetch.
     */
    where: BloqueadoWhereUniqueInput
  }

  /**
   * Bloqueado findFirst
   */
  export type BloqueadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * Filter, which Bloqueado to fetch.
     */
    where?: BloqueadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bloqueados to fetch.
     */
    orderBy?: BloqueadoOrderByWithRelationInput | BloqueadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bloqueados.
     */
    cursor?: BloqueadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bloqueados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bloqueados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bloqueados.
     */
    distinct?: BloqueadoScalarFieldEnum | BloqueadoScalarFieldEnum[]
  }

  /**
   * Bloqueado findFirstOrThrow
   */
  export type BloqueadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * Filter, which Bloqueado to fetch.
     */
    where?: BloqueadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bloqueados to fetch.
     */
    orderBy?: BloqueadoOrderByWithRelationInput | BloqueadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bloqueados.
     */
    cursor?: BloqueadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bloqueados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bloqueados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bloqueados.
     */
    distinct?: BloqueadoScalarFieldEnum | BloqueadoScalarFieldEnum[]
  }

  /**
   * Bloqueado findMany
   */
  export type BloqueadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * Filter, which Bloqueados to fetch.
     */
    where?: BloqueadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bloqueados to fetch.
     */
    orderBy?: BloqueadoOrderByWithRelationInput | BloqueadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bloqueados.
     */
    cursor?: BloqueadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bloqueados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bloqueados.
     */
    skip?: number
    distinct?: BloqueadoScalarFieldEnum | BloqueadoScalarFieldEnum[]
  }

  /**
   * Bloqueado create
   */
  export type BloqueadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Bloqueado.
     */
    data: XOR<BloqueadoCreateInput, BloqueadoUncheckedCreateInput>
  }

  /**
   * Bloqueado createMany
   */
  export type BloqueadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bloqueados.
     */
    data: BloqueadoCreateManyInput | BloqueadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bloqueado createManyAndReturn
   */
  export type BloqueadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Bloqueados.
     */
    data: BloqueadoCreateManyInput | BloqueadoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bloqueado update
   */
  export type BloqueadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Bloqueado.
     */
    data: XOR<BloqueadoUpdateInput, BloqueadoUncheckedUpdateInput>
    /**
     * Choose, which Bloqueado to update.
     */
    where: BloqueadoWhereUniqueInput
  }

  /**
   * Bloqueado updateMany
   */
  export type BloqueadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bloqueados.
     */
    data: XOR<BloqueadoUpdateManyMutationInput, BloqueadoUncheckedUpdateManyInput>
    /**
     * Filter which Bloqueados to update
     */
    where?: BloqueadoWhereInput
  }

  /**
   * Bloqueado upsert
   */
  export type BloqueadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Bloqueado to update in case it exists.
     */
    where: BloqueadoWhereUniqueInput
    /**
     * In case the Bloqueado found by the `where` argument doesn't exist, create a new Bloqueado with this data.
     */
    create: XOR<BloqueadoCreateInput, BloqueadoUncheckedCreateInput>
    /**
     * In case the Bloqueado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BloqueadoUpdateInput, BloqueadoUncheckedUpdateInput>
  }

  /**
   * Bloqueado delete
   */
  export type BloqueadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
    /**
     * Filter which Bloqueado to delete.
     */
    where: BloqueadoWhereUniqueInput
  }

  /**
   * Bloqueado deleteMany
   */
  export type BloqueadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bloqueados to delete
     */
    where?: BloqueadoWhereInput
  }

  /**
   * Bloqueado without action
   */
  export type BloqueadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bloqueado
     */
    select?: BloqueadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BloqueadoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id_usuario: 'id_usuario',
    direccion_correo: 'direccion_correo',
    password: 'password',
    nombre: 'nombre',
    descripcion: 'descripcion'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const CorreoScalarFieldEnum: {
    id_correo: 'id_correo',
    id_remitente: 'id_remitente',
    id_destinatario: 'id_destinatario'
  };

  export type CorreoScalarFieldEnum = (typeof CorreoScalarFieldEnum)[keyof typeof CorreoScalarFieldEnum]


  export const FavoritoScalarFieldEnum: {
    id_favorito: 'id_favorito',
    id_usuario_favorito: 'id_usuario_favorito',
    id_usuario: 'id_usuario'
  };

  export type FavoritoScalarFieldEnum = (typeof FavoritoScalarFieldEnum)[keyof typeof FavoritoScalarFieldEnum]


  export const BloqueadoScalarFieldEnum: {
    id_bloqueado: 'id_bloqueado',
    id_usuario_bloqueado: 'id_usuario_bloqueado',
    id_usuario: 'id_usuario'
  };

  export type BloqueadoScalarFieldEnum = (typeof BloqueadoScalarFieldEnum)[keyof typeof BloqueadoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id_usuario?: IntFilter<"Usuario"> | number
    direccion_correo?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    descripcion?: StringNullableFilter<"Usuario"> | string | null
    direcciones_favoritas?: FavoritoListRelationFilter
    direcciones_bloqueadas?: BloqueadoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id_usuario?: SortOrder
    direccion_correo?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    direcciones_favoritas?: FavoritoOrderByRelationAggregateInput
    direcciones_bloqueadas?: BloqueadoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id_usuario?: number
    direccion_correo?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    password?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    descripcion?: StringNullableFilter<"Usuario"> | string | null
    direcciones_favoritas?: FavoritoListRelationFilter
    direcciones_bloqueadas?: BloqueadoListRelationFilter
  }, "id_usuario" | "direccion_correo">

  export type UsuarioOrderByWithAggregationInput = {
    id_usuario?: SortOrder
    direccion_correo?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id_usuario?: IntWithAggregatesFilter<"Usuario"> | number
    direccion_correo?: StringWithAggregatesFilter<"Usuario"> | string
    password?: StringWithAggregatesFilter<"Usuario"> | string
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
  }

  export type CorreoWhereInput = {
    AND?: CorreoWhereInput | CorreoWhereInput[]
    OR?: CorreoWhereInput[]
    NOT?: CorreoWhereInput | CorreoWhereInput[]
    id_correo?: IntFilter<"Correo"> | number
    id_remitente?: IntFilter<"Correo"> | number
    id_destinatario?: IntFilter<"Correo"> | number
  }

  export type CorreoOrderByWithRelationInput = {
    id_correo?: SortOrder
    id_remitente?: SortOrder
    id_destinatario?: SortOrder
  }

  export type CorreoWhereUniqueInput = Prisma.AtLeast<{
    id_correo?: number
    AND?: CorreoWhereInput | CorreoWhereInput[]
    OR?: CorreoWhereInput[]
    NOT?: CorreoWhereInput | CorreoWhereInput[]
    id_remitente?: IntFilter<"Correo"> | number
    id_destinatario?: IntFilter<"Correo"> | number
  }, "id_correo">

  export type CorreoOrderByWithAggregationInput = {
    id_correo?: SortOrder
    id_remitente?: SortOrder
    id_destinatario?: SortOrder
    _count?: CorreoCountOrderByAggregateInput
    _avg?: CorreoAvgOrderByAggregateInput
    _max?: CorreoMaxOrderByAggregateInput
    _min?: CorreoMinOrderByAggregateInput
    _sum?: CorreoSumOrderByAggregateInput
  }

  export type CorreoScalarWhereWithAggregatesInput = {
    AND?: CorreoScalarWhereWithAggregatesInput | CorreoScalarWhereWithAggregatesInput[]
    OR?: CorreoScalarWhereWithAggregatesInput[]
    NOT?: CorreoScalarWhereWithAggregatesInput | CorreoScalarWhereWithAggregatesInput[]
    id_correo?: IntWithAggregatesFilter<"Correo"> | number
    id_remitente?: IntWithAggregatesFilter<"Correo"> | number
    id_destinatario?: IntWithAggregatesFilter<"Correo"> | number
  }

  export type FavoritoWhereInput = {
    AND?: FavoritoWhereInput | FavoritoWhereInput[]
    OR?: FavoritoWhereInput[]
    NOT?: FavoritoWhereInput | FavoritoWhereInput[]
    id_favorito?: IntFilter<"Favorito"> | number
    id_usuario_favorito?: IntFilter<"Favorito"> | number
    id_usuario?: IntFilter<"Favorito"> | number
    usuario_favorito?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type FavoritoOrderByWithRelationInput = {
    id_favorito?: SortOrder
    id_usuario_favorito?: SortOrder
    id_usuario?: SortOrder
    usuario_favorito?: UsuarioOrderByWithRelationInput
  }

  export type FavoritoWhereUniqueInput = Prisma.AtLeast<{
    id_favorito?: number
    id_usuario_favorito?: number
    AND?: FavoritoWhereInput | FavoritoWhereInput[]
    OR?: FavoritoWhereInput[]
    NOT?: FavoritoWhereInput | FavoritoWhereInput[]
    id_usuario?: IntFilter<"Favorito"> | number
    usuario_favorito?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id_favorito" | "id_usuario_favorito">

  export type FavoritoOrderByWithAggregationInput = {
    id_favorito?: SortOrder
    id_usuario_favorito?: SortOrder
    id_usuario?: SortOrder
    _count?: FavoritoCountOrderByAggregateInput
    _avg?: FavoritoAvgOrderByAggregateInput
    _max?: FavoritoMaxOrderByAggregateInput
    _min?: FavoritoMinOrderByAggregateInput
    _sum?: FavoritoSumOrderByAggregateInput
  }

  export type FavoritoScalarWhereWithAggregatesInput = {
    AND?: FavoritoScalarWhereWithAggregatesInput | FavoritoScalarWhereWithAggregatesInput[]
    OR?: FavoritoScalarWhereWithAggregatesInput[]
    NOT?: FavoritoScalarWhereWithAggregatesInput | FavoritoScalarWhereWithAggregatesInput[]
    id_favorito?: IntWithAggregatesFilter<"Favorito"> | number
    id_usuario_favorito?: IntWithAggregatesFilter<"Favorito"> | number
    id_usuario?: IntWithAggregatesFilter<"Favorito"> | number
  }

  export type BloqueadoWhereInput = {
    AND?: BloqueadoWhereInput | BloqueadoWhereInput[]
    OR?: BloqueadoWhereInput[]
    NOT?: BloqueadoWhereInput | BloqueadoWhereInput[]
    id_bloqueado?: IntFilter<"Bloqueado"> | number
    id_usuario_bloqueado?: IntFilter<"Bloqueado"> | number
    id_usuario?: IntFilter<"Bloqueado"> | number
    usuario_bloqueado?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type BloqueadoOrderByWithRelationInput = {
    id_bloqueado?: SortOrder
    id_usuario_bloqueado?: SortOrder
    id_usuario?: SortOrder
    usuario_bloqueado?: UsuarioOrderByWithRelationInput
  }

  export type BloqueadoWhereUniqueInput = Prisma.AtLeast<{
    id_bloqueado?: number
    AND?: BloqueadoWhereInput | BloqueadoWhereInput[]
    OR?: BloqueadoWhereInput[]
    NOT?: BloqueadoWhereInput | BloqueadoWhereInput[]
    id_usuario_bloqueado?: IntFilter<"Bloqueado"> | number
    id_usuario?: IntFilter<"Bloqueado"> | number
    usuario_bloqueado?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id_bloqueado">

  export type BloqueadoOrderByWithAggregationInput = {
    id_bloqueado?: SortOrder
    id_usuario_bloqueado?: SortOrder
    id_usuario?: SortOrder
    _count?: BloqueadoCountOrderByAggregateInput
    _avg?: BloqueadoAvgOrderByAggregateInput
    _max?: BloqueadoMaxOrderByAggregateInput
    _min?: BloqueadoMinOrderByAggregateInput
    _sum?: BloqueadoSumOrderByAggregateInput
  }

  export type BloqueadoScalarWhereWithAggregatesInput = {
    AND?: BloqueadoScalarWhereWithAggregatesInput | BloqueadoScalarWhereWithAggregatesInput[]
    OR?: BloqueadoScalarWhereWithAggregatesInput[]
    NOT?: BloqueadoScalarWhereWithAggregatesInput | BloqueadoScalarWhereWithAggregatesInput[]
    id_bloqueado?: IntWithAggregatesFilter<"Bloqueado"> | number
    id_usuario_bloqueado?: IntWithAggregatesFilter<"Bloqueado"> | number
    id_usuario?: IntWithAggregatesFilter<"Bloqueado"> | number
  }

  export type UsuarioCreateInput = {
    direccion_correo: string
    password: string
    nombre: string
    descripcion?: string | null
    direcciones_favoritas?: FavoritoCreateNestedManyWithoutUsuario_favoritoInput
    direcciones_bloqueadas?: BloqueadoCreateNestedManyWithoutUsuario_bloqueadoInput
  }

  export type UsuarioUncheckedCreateInput = {
    id_usuario?: number
    direccion_correo: string
    password: string
    nombre: string
    descripcion?: string | null
    direcciones_favoritas?: FavoritoUncheckedCreateNestedManyWithoutUsuario_favoritoInput
    direcciones_bloqueadas?: BloqueadoUncheckedCreateNestedManyWithoutUsuario_bloqueadoInput
  }

  export type UsuarioUpdateInput = {
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    direcciones_favoritas?: FavoritoUpdateManyWithoutUsuario_favoritoNestedInput
    direcciones_bloqueadas?: BloqueadoUpdateManyWithoutUsuario_bloqueadoNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    direcciones_favoritas?: FavoritoUncheckedUpdateManyWithoutUsuario_favoritoNestedInput
    direcciones_bloqueadas?: BloqueadoUncheckedUpdateManyWithoutUsuario_bloqueadoNestedInput
  }

  export type UsuarioCreateManyInput = {
    id_usuario?: number
    direccion_correo: string
    password: string
    nombre: string
    descripcion?: string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CorreoCreateInput = {
    id_remitente: number
    id_destinatario: number
  }

  export type CorreoUncheckedCreateInput = {
    id_correo?: number
    id_remitente: number
    id_destinatario: number
  }

  export type CorreoUpdateInput = {
    id_remitente?: IntFieldUpdateOperationsInput | number
    id_destinatario?: IntFieldUpdateOperationsInput | number
  }

  export type CorreoUncheckedUpdateInput = {
    id_correo?: IntFieldUpdateOperationsInput | number
    id_remitente?: IntFieldUpdateOperationsInput | number
    id_destinatario?: IntFieldUpdateOperationsInput | number
  }

  export type CorreoCreateManyInput = {
    id_correo?: number
    id_remitente: number
    id_destinatario: number
  }

  export type CorreoUpdateManyMutationInput = {
    id_remitente?: IntFieldUpdateOperationsInput | number
    id_destinatario?: IntFieldUpdateOperationsInput | number
  }

  export type CorreoUncheckedUpdateManyInput = {
    id_correo?: IntFieldUpdateOperationsInput | number
    id_remitente?: IntFieldUpdateOperationsInput | number
    id_destinatario?: IntFieldUpdateOperationsInput | number
  }

  export type FavoritoCreateInput = {
    id_usuario: number
    usuario_favorito: UsuarioCreateNestedOneWithoutDirecciones_favoritasInput
  }

  export type FavoritoUncheckedCreateInput = {
    id_favorito?: number
    id_usuario_favorito: number
    id_usuario: number
  }

  export type FavoritoUpdateInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    usuario_favorito?: UsuarioUpdateOneRequiredWithoutDirecciones_favoritasNestedInput
  }

  export type FavoritoUncheckedUpdateInput = {
    id_favorito?: IntFieldUpdateOperationsInput | number
    id_usuario_favorito?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type FavoritoCreateManyInput = {
    id_favorito?: number
    id_usuario_favorito: number
    id_usuario: number
  }

  export type FavoritoUpdateManyMutationInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type FavoritoUncheckedUpdateManyInput = {
    id_favorito?: IntFieldUpdateOperationsInput | number
    id_usuario_favorito?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type BloqueadoCreateInput = {
    id_usuario: number
    usuario_bloqueado: UsuarioCreateNestedOneWithoutDirecciones_bloqueadasInput
  }

  export type BloqueadoUncheckedCreateInput = {
    id_bloqueado?: number
    id_usuario_bloqueado: number
    id_usuario: number
  }

  export type BloqueadoUpdateInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    usuario_bloqueado?: UsuarioUpdateOneRequiredWithoutDirecciones_bloqueadasNestedInput
  }

  export type BloqueadoUncheckedUpdateInput = {
    id_bloqueado?: IntFieldUpdateOperationsInput | number
    id_usuario_bloqueado?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type BloqueadoCreateManyInput = {
    id_bloqueado?: number
    id_usuario_bloqueado: number
    id_usuario: number
  }

  export type BloqueadoUpdateManyMutationInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type BloqueadoUncheckedUpdateManyInput = {
    id_bloqueado?: IntFieldUpdateOperationsInput | number
    id_usuario_bloqueado?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FavoritoListRelationFilter = {
    every?: FavoritoWhereInput
    some?: FavoritoWhereInput
    none?: FavoritoWhereInput
  }

  export type BloqueadoListRelationFilter = {
    every?: BloqueadoWhereInput
    some?: BloqueadoWhereInput
    none?: BloqueadoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FavoritoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BloqueadoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id_usuario?: SortOrder
    direccion_correo?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id_usuario?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id_usuario?: SortOrder
    direccion_correo?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id_usuario?: SortOrder
    direccion_correo?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id_usuario?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CorreoCountOrderByAggregateInput = {
    id_correo?: SortOrder
    id_remitente?: SortOrder
    id_destinatario?: SortOrder
  }

  export type CorreoAvgOrderByAggregateInput = {
    id_correo?: SortOrder
    id_remitente?: SortOrder
    id_destinatario?: SortOrder
  }

  export type CorreoMaxOrderByAggregateInput = {
    id_correo?: SortOrder
    id_remitente?: SortOrder
    id_destinatario?: SortOrder
  }

  export type CorreoMinOrderByAggregateInput = {
    id_correo?: SortOrder
    id_remitente?: SortOrder
    id_destinatario?: SortOrder
  }

  export type CorreoSumOrderByAggregateInput = {
    id_correo?: SortOrder
    id_remitente?: SortOrder
    id_destinatario?: SortOrder
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type FavoritoCountOrderByAggregateInput = {
    id_favorito?: SortOrder
    id_usuario_favorito?: SortOrder
    id_usuario?: SortOrder
  }

  export type FavoritoAvgOrderByAggregateInput = {
    id_favorito?: SortOrder
    id_usuario_favorito?: SortOrder
    id_usuario?: SortOrder
  }

  export type FavoritoMaxOrderByAggregateInput = {
    id_favorito?: SortOrder
    id_usuario_favorito?: SortOrder
    id_usuario?: SortOrder
  }

  export type FavoritoMinOrderByAggregateInput = {
    id_favorito?: SortOrder
    id_usuario_favorito?: SortOrder
    id_usuario?: SortOrder
  }

  export type FavoritoSumOrderByAggregateInput = {
    id_favorito?: SortOrder
    id_usuario_favorito?: SortOrder
    id_usuario?: SortOrder
  }

  export type BloqueadoCountOrderByAggregateInput = {
    id_bloqueado?: SortOrder
    id_usuario_bloqueado?: SortOrder
    id_usuario?: SortOrder
  }

  export type BloqueadoAvgOrderByAggregateInput = {
    id_bloqueado?: SortOrder
    id_usuario_bloqueado?: SortOrder
    id_usuario?: SortOrder
  }

  export type BloqueadoMaxOrderByAggregateInput = {
    id_bloqueado?: SortOrder
    id_usuario_bloqueado?: SortOrder
    id_usuario?: SortOrder
  }

  export type BloqueadoMinOrderByAggregateInput = {
    id_bloqueado?: SortOrder
    id_usuario_bloqueado?: SortOrder
    id_usuario?: SortOrder
  }

  export type BloqueadoSumOrderByAggregateInput = {
    id_bloqueado?: SortOrder
    id_usuario_bloqueado?: SortOrder
    id_usuario?: SortOrder
  }

  export type FavoritoCreateNestedManyWithoutUsuario_favoritoInput = {
    create?: XOR<FavoritoCreateWithoutUsuario_favoritoInput, FavoritoUncheckedCreateWithoutUsuario_favoritoInput> | FavoritoCreateWithoutUsuario_favoritoInput[] | FavoritoUncheckedCreateWithoutUsuario_favoritoInput[]
    connectOrCreate?: FavoritoCreateOrConnectWithoutUsuario_favoritoInput | FavoritoCreateOrConnectWithoutUsuario_favoritoInput[]
    createMany?: FavoritoCreateManyUsuario_favoritoInputEnvelope
    connect?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
  }

  export type BloqueadoCreateNestedManyWithoutUsuario_bloqueadoInput = {
    create?: XOR<BloqueadoCreateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput> | BloqueadoCreateWithoutUsuario_bloqueadoInput[] | BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput[]
    connectOrCreate?: BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput | BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput[]
    createMany?: BloqueadoCreateManyUsuario_bloqueadoInputEnvelope
    connect?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
  }

  export type FavoritoUncheckedCreateNestedManyWithoutUsuario_favoritoInput = {
    create?: XOR<FavoritoCreateWithoutUsuario_favoritoInput, FavoritoUncheckedCreateWithoutUsuario_favoritoInput> | FavoritoCreateWithoutUsuario_favoritoInput[] | FavoritoUncheckedCreateWithoutUsuario_favoritoInput[]
    connectOrCreate?: FavoritoCreateOrConnectWithoutUsuario_favoritoInput | FavoritoCreateOrConnectWithoutUsuario_favoritoInput[]
    createMany?: FavoritoCreateManyUsuario_favoritoInputEnvelope
    connect?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
  }

  export type BloqueadoUncheckedCreateNestedManyWithoutUsuario_bloqueadoInput = {
    create?: XOR<BloqueadoCreateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput> | BloqueadoCreateWithoutUsuario_bloqueadoInput[] | BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput[]
    connectOrCreate?: BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput | BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput[]
    createMany?: BloqueadoCreateManyUsuario_bloqueadoInputEnvelope
    connect?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FavoritoUpdateManyWithoutUsuario_favoritoNestedInput = {
    create?: XOR<FavoritoCreateWithoutUsuario_favoritoInput, FavoritoUncheckedCreateWithoutUsuario_favoritoInput> | FavoritoCreateWithoutUsuario_favoritoInput[] | FavoritoUncheckedCreateWithoutUsuario_favoritoInput[]
    connectOrCreate?: FavoritoCreateOrConnectWithoutUsuario_favoritoInput | FavoritoCreateOrConnectWithoutUsuario_favoritoInput[]
    upsert?: FavoritoUpsertWithWhereUniqueWithoutUsuario_favoritoInput | FavoritoUpsertWithWhereUniqueWithoutUsuario_favoritoInput[]
    createMany?: FavoritoCreateManyUsuario_favoritoInputEnvelope
    set?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    disconnect?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    delete?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    connect?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    update?: FavoritoUpdateWithWhereUniqueWithoutUsuario_favoritoInput | FavoritoUpdateWithWhereUniqueWithoutUsuario_favoritoInput[]
    updateMany?: FavoritoUpdateManyWithWhereWithoutUsuario_favoritoInput | FavoritoUpdateManyWithWhereWithoutUsuario_favoritoInput[]
    deleteMany?: FavoritoScalarWhereInput | FavoritoScalarWhereInput[]
  }

  export type BloqueadoUpdateManyWithoutUsuario_bloqueadoNestedInput = {
    create?: XOR<BloqueadoCreateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput> | BloqueadoCreateWithoutUsuario_bloqueadoInput[] | BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput[]
    connectOrCreate?: BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput | BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput[]
    upsert?: BloqueadoUpsertWithWhereUniqueWithoutUsuario_bloqueadoInput | BloqueadoUpsertWithWhereUniqueWithoutUsuario_bloqueadoInput[]
    createMany?: BloqueadoCreateManyUsuario_bloqueadoInputEnvelope
    set?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    disconnect?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    delete?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    connect?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    update?: BloqueadoUpdateWithWhereUniqueWithoutUsuario_bloqueadoInput | BloqueadoUpdateWithWhereUniqueWithoutUsuario_bloqueadoInput[]
    updateMany?: BloqueadoUpdateManyWithWhereWithoutUsuario_bloqueadoInput | BloqueadoUpdateManyWithWhereWithoutUsuario_bloqueadoInput[]
    deleteMany?: BloqueadoScalarWhereInput | BloqueadoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FavoritoUncheckedUpdateManyWithoutUsuario_favoritoNestedInput = {
    create?: XOR<FavoritoCreateWithoutUsuario_favoritoInput, FavoritoUncheckedCreateWithoutUsuario_favoritoInput> | FavoritoCreateWithoutUsuario_favoritoInput[] | FavoritoUncheckedCreateWithoutUsuario_favoritoInput[]
    connectOrCreate?: FavoritoCreateOrConnectWithoutUsuario_favoritoInput | FavoritoCreateOrConnectWithoutUsuario_favoritoInput[]
    upsert?: FavoritoUpsertWithWhereUniqueWithoutUsuario_favoritoInput | FavoritoUpsertWithWhereUniqueWithoutUsuario_favoritoInput[]
    createMany?: FavoritoCreateManyUsuario_favoritoInputEnvelope
    set?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    disconnect?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    delete?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    connect?: FavoritoWhereUniqueInput | FavoritoWhereUniqueInput[]
    update?: FavoritoUpdateWithWhereUniqueWithoutUsuario_favoritoInput | FavoritoUpdateWithWhereUniqueWithoutUsuario_favoritoInput[]
    updateMany?: FavoritoUpdateManyWithWhereWithoutUsuario_favoritoInput | FavoritoUpdateManyWithWhereWithoutUsuario_favoritoInput[]
    deleteMany?: FavoritoScalarWhereInput | FavoritoScalarWhereInput[]
  }

  export type BloqueadoUncheckedUpdateManyWithoutUsuario_bloqueadoNestedInput = {
    create?: XOR<BloqueadoCreateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput> | BloqueadoCreateWithoutUsuario_bloqueadoInput[] | BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput[]
    connectOrCreate?: BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput | BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput[]
    upsert?: BloqueadoUpsertWithWhereUniqueWithoutUsuario_bloqueadoInput | BloqueadoUpsertWithWhereUniqueWithoutUsuario_bloqueadoInput[]
    createMany?: BloqueadoCreateManyUsuario_bloqueadoInputEnvelope
    set?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    disconnect?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    delete?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    connect?: BloqueadoWhereUniqueInput | BloqueadoWhereUniqueInput[]
    update?: BloqueadoUpdateWithWhereUniqueWithoutUsuario_bloqueadoInput | BloqueadoUpdateWithWhereUniqueWithoutUsuario_bloqueadoInput[]
    updateMany?: BloqueadoUpdateManyWithWhereWithoutUsuario_bloqueadoInput | BloqueadoUpdateManyWithWhereWithoutUsuario_bloqueadoInput[]
    deleteMany?: BloqueadoScalarWhereInput | BloqueadoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutDirecciones_favoritasInput = {
    create?: XOR<UsuarioCreateWithoutDirecciones_favoritasInput, UsuarioUncheckedCreateWithoutDirecciones_favoritasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDirecciones_favoritasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutDirecciones_favoritasNestedInput = {
    create?: XOR<UsuarioCreateWithoutDirecciones_favoritasInput, UsuarioUncheckedCreateWithoutDirecciones_favoritasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDirecciones_favoritasInput
    upsert?: UsuarioUpsertWithoutDirecciones_favoritasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutDirecciones_favoritasInput, UsuarioUpdateWithoutDirecciones_favoritasInput>, UsuarioUncheckedUpdateWithoutDirecciones_favoritasInput>
  }

  export type UsuarioCreateNestedOneWithoutDirecciones_bloqueadasInput = {
    create?: XOR<UsuarioCreateWithoutDirecciones_bloqueadasInput, UsuarioUncheckedCreateWithoutDirecciones_bloqueadasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDirecciones_bloqueadasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutDirecciones_bloqueadasNestedInput = {
    create?: XOR<UsuarioCreateWithoutDirecciones_bloqueadasInput, UsuarioUncheckedCreateWithoutDirecciones_bloqueadasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDirecciones_bloqueadasInput
    upsert?: UsuarioUpsertWithoutDirecciones_bloqueadasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutDirecciones_bloqueadasInput, UsuarioUpdateWithoutDirecciones_bloqueadasInput>, UsuarioUncheckedUpdateWithoutDirecciones_bloqueadasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FavoritoCreateWithoutUsuario_favoritoInput = {
    id_usuario: number
  }

  export type FavoritoUncheckedCreateWithoutUsuario_favoritoInput = {
    id_favorito?: number
    id_usuario: number
  }

  export type FavoritoCreateOrConnectWithoutUsuario_favoritoInput = {
    where: FavoritoWhereUniqueInput
    create: XOR<FavoritoCreateWithoutUsuario_favoritoInput, FavoritoUncheckedCreateWithoutUsuario_favoritoInput>
  }

  export type FavoritoCreateManyUsuario_favoritoInputEnvelope = {
    data: FavoritoCreateManyUsuario_favoritoInput | FavoritoCreateManyUsuario_favoritoInput[]
    skipDuplicates?: boolean
  }

  export type BloqueadoCreateWithoutUsuario_bloqueadoInput = {
    id_usuario: number
  }

  export type BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput = {
    id_bloqueado?: number
    id_usuario: number
  }

  export type BloqueadoCreateOrConnectWithoutUsuario_bloqueadoInput = {
    where: BloqueadoWhereUniqueInput
    create: XOR<BloqueadoCreateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput>
  }

  export type BloqueadoCreateManyUsuario_bloqueadoInputEnvelope = {
    data: BloqueadoCreateManyUsuario_bloqueadoInput | BloqueadoCreateManyUsuario_bloqueadoInput[]
    skipDuplicates?: boolean
  }

  export type FavoritoUpsertWithWhereUniqueWithoutUsuario_favoritoInput = {
    where: FavoritoWhereUniqueInput
    update: XOR<FavoritoUpdateWithoutUsuario_favoritoInput, FavoritoUncheckedUpdateWithoutUsuario_favoritoInput>
    create: XOR<FavoritoCreateWithoutUsuario_favoritoInput, FavoritoUncheckedCreateWithoutUsuario_favoritoInput>
  }

  export type FavoritoUpdateWithWhereUniqueWithoutUsuario_favoritoInput = {
    where: FavoritoWhereUniqueInput
    data: XOR<FavoritoUpdateWithoutUsuario_favoritoInput, FavoritoUncheckedUpdateWithoutUsuario_favoritoInput>
  }

  export type FavoritoUpdateManyWithWhereWithoutUsuario_favoritoInput = {
    where: FavoritoScalarWhereInput
    data: XOR<FavoritoUpdateManyMutationInput, FavoritoUncheckedUpdateManyWithoutUsuario_favoritoInput>
  }

  export type FavoritoScalarWhereInput = {
    AND?: FavoritoScalarWhereInput | FavoritoScalarWhereInput[]
    OR?: FavoritoScalarWhereInput[]
    NOT?: FavoritoScalarWhereInput | FavoritoScalarWhereInput[]
    id_favorito?: IntFilter<"Favorito"> | number
    id_usuario_favorito?: IntFilter<"Favorito"> | number
    id_usuario?: IntFilter<"Favorito"> | number
  }

  export type BloqueadoUpsertWithWhereUniqueWithoutUsuario_bloqueadoInput = {
    where: BloqueadoWhereUniqueInput
    update: XOR<BloqueadoUpdateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedUpdateWithoutUsuario_bloqueadoInput>
    create: XOR<BloqueadoCreateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedCreateWithoutUsuario_bloqueadoInput>
  }

  export type BloqueadoUpdateWithWhereUniqueWithoutUsuario_bloqueadoInput = {
    where: BloqueadoWhereUniqueInput
    data: XOR<BloqueadoUpdateWithoutUsuario_bloqueadoInput, BloqueadoUncheckedUpdateWithoutUsuario_bloqueadoInput>
  }

  export type BloqueadoUpdateManyWithWhereWithoutUsuario_bloqueadoInput = {
    where: BloqueadoScalarWhereInput
    data: XOR<BloqueadoUpdateManyMutationInput, BloqueadoUncheckedUpdateManyWithoutUsuario_bloqueadoInput>
  }

  export type BloqueadoScalarWhereInput = {
    AND?: BloqueadoScalarWhereInput | BloqueadoScalarWhereInput[]
    OR?: BloqueadoScalarWhereInput[]
    NOT?: BloqueadoScalarWhereInput | BloqueadoScalarWhereInput[]
    id_bloqueado?: IntFilter<"Bloqueado"> | number
    id_usuario_bloqueado?: IntFilter<"Bloqueado"> | number
    id_usuario?: IntFilter<"Bloqueado"> | number
  }

  export type UsuarioCreateWithoutDirecciones_favoritasInput = {
    direccion_correo: string
    password: string
    nombre: string
    descripcion?: string | null
    direcciones_bloqueadas?: BloqueadoCreateNestedManyWithoutUsuario_bloqueadoInput
  }

  export type UsuarioUncheckedCreateWithoutDirecciones_favoritasInput = {
    id_usuario?: number
    direccion_correo: string
    password: string
    nombre: string
    descripcion?: string | null
    direcciones_bloqueadas?: BloqueadoUncheckedCreateNestedManyWithoutUsuario_bloqueadoInput
  }

  export type UsuarioCreateOrConnectWithoutDirecciones_favoritasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutDirecciones_favoritasInput, UsuarioUncheckedCreateWithoutDirecciones_favoritasInput>
  }

  export type UsuarioUpsertWithoutDirecciones_favoritasInput = {
    update: XOR<UsuarioUpdateWithoutDirecciones_favoritasInput, UsuarioUncheckedUpdateWithoutDirecciones_favoritasInput>
    create: XOR<UsuarioCreateWithoutDirecciones_favoritasInput, UsuarioUncheckedCreateWithoutDirecciones_favoritasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutDirecciones_favoritasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutDirecciones_favoritasInput, UsuarioUncheckedUpdateWithoutDirecciones_favoritasInput>
  }

  export type UsuarioUpdateWithoutDirecciones_favoritasInput = {
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    direcciones_bloqueadas?: BloqueadoUpdateManyWithoutUsuario_bloqueadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutDirecciones_favoritasInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    direcciones_bloqueadas?: BloqueadoUncheckedUpdateManyWithoutUsuario_bloqueadoNestedInput
  }

  export type UsuarioCreateWithoutDirecciones_bloqueadasInput = {
    direccion_correo: string
    password: string
    nombre: string
    descripcion?: string | null
    direcciones_favoritas?: FavoritoCreateNestedManyWithoutUsuario_favoritoInput
  }

  export type UsuarioUncheckedCreateWithoutDirecciones_bloqueadasInput = {
    id_usuario?: number
    direccion_correo: string
    password: string
    nombre: string
    descripcion?: string | null
    direcciones_favoritas?: FavoritoUncheckedCreateNestedManyWithoutUsuario_favoritoInput
  }

  export type UsuarioCreateOrConnectWithoutDirecciones_bloqueadasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutDirecciones_bloqueadasInput, UsuarioUncheckedCreateWithoutDirecciones_bloqueadasInput>
  }

  export type UsuarioUpsertWithoutDirecciones_bloqueadasInput = {
    update: XOR<UsuarioUpdateWithoutDirecciones_bloqueadasInput, UsuarioUncheckedUpdateWithoutDirecciones_bloqueadasInput>
    create: XOR<UsuarioCreateWithoutDirecciones_bloqueadasInput, UsuarioUncheckedCreateWithoutDirecciones_bloqueadasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutDirecciones_bloqueadasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutDirecciones_bloqueadasInput, UsuarioUncheckedUpdateWithoutDirecciones_bloqueadasInput>
  }

  export type UsuarioUpdateWithoutDirecciones_bloqueadasInput = {
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    direcciones_favoritas?: FavoritoUpdateManyWithoutUsuario_favoritoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutDirecciones_bloqueadasInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    direccion_correo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    direcciones_favoritas?: FavoritoUncheckedUpdateManyWithoutUsuario_favoritoNestedInput
  }

  export type FavoritoCreateManyUsuario_favoritoInput = {
    id_favorito?: number
    id_usuario: number
  }

  export type BloqueadoCreateManyUsuario_bloqueadoInput = {
    id_bloqueado?: number
    id_usuario: number
  }

  export type FavoritoUpdateWithoutUsuario_favoritoInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type FavoritoUncheckedUpdateWithoutUsuario_favoritoInput = {
    id_favorito?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type FavoritoUncheckedUpdateManyWithoutUsuario_favoritoInput = {
    id_favorito?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type BloqueadoUpdateWithoutUsuario_bloqueadoInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type BloqueadoUncheckedUpdateWithoutUsuario_bloqueadoInput = {
    id_bloqueado?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type BloqueadoUncheckedUpdateManyWithoutUsuario_bloqueadoInput = {
    id_bloqueado?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CorreoDefaultArgs instead
     */
    export type CorreoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CorreoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoritoDefaultArgs instead
     */
    export type FavoritoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoritoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BloqueadoDefaultArgs instead
     */
    export type BloqueadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BloqueadoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}